#!/bin/bash

# Pok√©mon Summary Report Generator
# Reads JSON files and generates CSV report with statistics

# Configuration
INPUT_DIR="pokemon_data"
OUTPUT_CSV="pokemon_report.csv"
TEMP_DATA="temp_pokemon_data.txt"

# Function to check if required tools are available
check_dependencies() {
    for cmd in jq awk; do
        if ! command -v "$cmd" &> /dev/null; then
            echo "‚ùå Error: $cmd is not installed or not in PATH"
            exit 1
        fi
    done
}

# Function to extract data from a single JSON file
extract_pokemon_data() {
    local json_file="$1"
    local pokemon_name
    local height_dm
    local weight_hg
    local height_m
    local weight_kg
    
    # Extract name and capitalize first letter using awk
    pokemon_name=$(jq -r '.name' "$json_file" | awk '{print toupper(substr($0,1,1)) substr($0,2)}')
    
    # Extract height (decimeters) and convert to meters using awk
    height_dm=$(jq -r '.height' "$json_file")
    height_m=$(echo "$height_dm" | awk '{printf "%.1f", $1/10}')
    
    # Extract weight (hectograms) and convert to kg using awk
    weight_hg=$(jq -r '.weight' "$json_file")
    weight_kg=$(echo "$weight_hg" | awk '{printf "%.1f", $1/10}')
    
    # Output in format: name,height,weight
    echo "$pokemon_name,$height_m,$weight_kg"
}

# Function to generate CSV report
generate_csv_report() {
    echo "Generating CSV report..."
    
    # Create CSV header
    echo "Name,Height (m),Weight (kg)" > "$OUTPUT_CSV"
    
    # Clear temp data file
    > "$TEMP_DATA"
    
    # Process each JSON file in the directory
    if [ -d "$INPUT_DIR" ] && [ "$(ls -A "$INPUT_DIR"/*.json 2>/dev/null)" ]; then
        for json_file in "$INPUT_DIR"/*.json; do
            if [ -f "$json_file" ]; then
                # Extract data and add to CSV
                data=$(extract_pokemon_data "$json_file")
                echo "$data" >> "$OUTPUT_CSV"
                
                # Also save to temp file for calculations (extract height,weight using awk)
                echo "$data" | awk -F',' '{print $2","$3}' >> "$TEMP_DATA"
            fi
        done
    else
        echo "‚ùå No JSON files found in $INPUT_DIR directory"
        echo "Please run the fetch script first to generate Pok√©mon data files"
        exit 1
    fi
}

# Function to calculate statistics using awk
calculate_statistics() {
    echo "Calculating statistics..."
    
    # Use awk to calculate averages
    awk -F',' '
    BEGIN {
        sum_height = 0
        sum_weight = 0
        count = 0
    }
    {
        sum_height += $1
        sum_weight += $2
        count++
    }
    END {
        if (count > 0) {
            avg_height = sum_height / count
            avg_weight = sum_weight / count
            printf "Average Height: %.2f m\n", avg_height
            printf "Average Weight: %.2f kg\n", avg_weight
        } else {
            print "No data to calculate averages"
        }
    }' "$TEMP_DATA"
}

# Function to display the CSV content
display_csv_content() {
    echo ""
    # Use awk to sort the CSV by name (skip header)
    awk 'NR==1 {print; next} {print | "sort"}' "$OUTPUT_CSV"
    echo ""
}

# Main execution
main() {
    echo "üöÄ Generating Pok√©mon Summary Report..."
    echo "Input directory: $INPUT_DIR"
    echo "Output file: $OUTPUT_CSV"
    echo "----------------------------------------"
    
    # Check dependencies
    check_dependencies
    
    # Generate the CSV report
    generate_csv_report
    
    # Check if CSV was created successfully
    if [ ! -f "$OUTPUT_CSV" ] || [ ! -s "$OUTPUT_CSV" ]; then
        echo "‚ùå Failed to generate CSV report"
        exit 1
    fi
    
    echo "CSV Report generated at: $OUTPUT_CSV"
    echo ""
    
    # Display the CSV content
    display_csv_content
    
    # Calculate and display statistics
    calculate_statistics
    
    # Cleanup temp file
    rm -f "$TEMP_DATA"
    
    echo ""
    echo "‚úÖ Report generation completed!"
}

# Run the main function
main "$@"
