# settings.py additions
# Add to your INSTALLED_APPS:
"""
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'pokemon_api',  # Add this line
]
"""

# Add to your main project urls.py:
"""
# project/urls.py
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
    path('pokemon/', include('pokemon_api.urls')),
    path('', include('pokemon_api.urls')),  # Optional: make Pokemon the root app
]

# Serve media files during development
if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
"""

# Media files configuration for JSON storage
"""
# Add to settings.py
import os

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'pokemon_api.log'),
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'pokemon_api': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}
"""

# ===================================================================
# requirements.txt
"""
Django>=4.2.0
requests>=2.28.0
Pillow>=9.0.0
"""

# ===================================================================
# pokemon_api/migrations/0001_initial.py
"""
# Generated by Django - run: python manage.py makemigrations
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='APIRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pokemon_name', models.CharField(max_length=100)),
                ('success', models.BooleanField()),
                ('error_message', models.TextField(blank=True)),
                ('http_status_code', models.IntegerField(blank=True, null=True)),
                ('request_timestamp', models.DateTimeField(auto_now_add=True)),
                ('response_data', models.JSONField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-request_timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Pokemon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pokemon_id', models.IntegerField(unique=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('height', models.IntegerField()),
                ('weight', models.IntegerField()),
                ('base_experience', models.IntegerField(blank=True, null=True)),
                ('raw_data', models.JSONField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['pokemon_id'],
            },
        ),
    ]
"""

# ===================================================================
# pokemon_api/tests.py
from django.test import TestCase, Client
from django.urls import reverse
from unittest.mock import patch, MagicMock
from .models import Pokemon, APIRequest
from .services import PokemonAPIService
import json


class PokemonModelTest(TestCase):
    def setUp(self):
        self.sample_data = {
            "id": 25,
            "name": "pikachu",
            "height": 4,
            "weight": 60,
            "base_experience": 112,
            "types": [
                {"type": {"name": "electric"}}
            ],
            "abilities": [
                {"ability": {"name": "static"}, "is_hidden": False},
                {"ability": {"name": "lightning-rod"}, "is_hidden": True}
            ],
            "stats": [
                {"stat": {"name": "hp"}, "base_stat": 35},
                {"stat": {"name": "attack"}, "base_stat": 55}
            ]
        }
        
        self.pokemon = Pokemon.objects.create(
            pokemon_id=25,
            name="pikachu",
            height=4,
            weight=60,
            base_experience=112,
            raw_data=self.sample_data
        )
    
    def test_pokemon_creation(self):
        self.assertEqual(self.pokemon.name, "pikachu")
        self.assertEqual(self.pokemon.pokemon_id, 25)
        
    def test_height_in_meters(self):
        self.assertEqual(self.pokemon.height_in_meters, 0.4)
        
    def test_weight_in_kg(self):
        self.assertEqual(self.pokemon.weight_in_kg, 6.0)
        
    def test_types_property(self):
        self.assertEqual(self.pokemon.types, ["electric"])
        
    def test_abilities_property(self):
        self.assertEqual(self.pokemon.abilities, ["static"])
        
    def test_hidden_abilities_property(self):
        self.assertEqual(self.pokemon.hidden_abilities, ["lightning-rod"])
        
    def test_base_stats_property(self):
        expected_stats = {"hp": 35, "attack": 55}
        self.assertEqual(self.pokemon.base_stats, expected_stats)


class PokemonAPIServiceTest(TestCase):
    def setUp(self):
        self.service = PokemonAPIService()
        
    @patch('pokemon_api.services.requests.Session.get')
    def test_successful_fetch(self, mock_get):
        # Mock successful API response
        mock_response = MagicMock()
        mock_response.status_code = 200
        mock_response.json.return_value = {
            "id": 1,
            "name": "bulbasaur",
            "height": 7,
            "weight": 69,
            "base_experience": 64,
            "types": [{"type": {"name": "grass"}}],
            "abilities": [{"ability": {"name": "overgrow"}, "is_hidden": False}],
            "stats": [{"stat": {"name": "hp"}, "base_stat": 45}]
        }
        mock_get.return_value = mock_response
        
        pokemon, success, error = self.service.fetch_pokemon("bulbasaur")
        
        self.assertTrue(success)
        self.assertIsNone(error)
        self.assertEqual(pokemon.name, "bulbasaur")
        self.assertEqual(pokemon.pokemon_id, 1)
        
    @patch('pokemon_api.services.requests.Session.get')
    def test_pokemon_not_found(self, mock_get):
        # Mock 404 response
        mock_response = MagicMock()
        mock_response.status_code = 404
        mock_get.return_value = mock_response
        
        pokemon, success, error = self.service.fetch_pokemon("nonexistent")
        
        self.assertFalse(success)
        self.assertIsNone(pokemon)
        self.assertIn("not found", error)


class PokemonViewsTest(TestCase):
    def setUp(self):
        self.client = Client()
        self.pokemon = Pokemon.objects.create(
            pokemon_id=25,
            name="pikachu",
            height=4,
            weight=60,
            base_experience=112,
            raw_data={"id": 25, "name": "pikachu"}
        )
    
    def test_pokemon_list_view(self):
        response = self.client.get(reverse('pokemon_api:list'))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, "pikachu")
        
    def test_pokemon_detail_view(self):
        response = self.client.get(reverse('pokemon_api:detail', kwargs={'pk': self.pokemon.pk}))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, "pikachu")
        
    def test_pokemon_search_view(self):
        response = self.client.get(reverse('pokemon_api:search'))
        self.assertEqual(response.status_code, 200)
        
    def test_pokemon_api_endpoint(self):
        response = self.client.get(reverse('pokemon_api:api', kwargs={'pokemon_name': 'pikachu'}))
        self.assertEqual(response.status_code, 200)
        data = json.loads(response.content)
        self.assertTrue(data['success'])
        self.assertEqual(data['data']['name'], 'pikachu')


# ===================================================================
# pokemon_api/management/__init__.py
# Empty file

# ===================================================================
# pokemon_api/management/commands/__init__.py
# Empty file

# ===================================================================
# Usage Examples and Documentation

"""
Django Pokemon API Project Setup Guide
=====================================

1. Installation & Setup:
   - Add 'pokemon_api' to INSTALLED_APPS
   - Include URLs in main project
   - Run migrations: python manage.py makemigrations && python manage.py migrate
   - Create superuser: python manage.py createsuperuser

2. Usage Examples:

   # Command line usage:
   python manage.py fetch_pokemon pikachu charizard bulbasaur
   python manage.py fetch_pokemon mew --force

   # In Django shell:
   from pokemon_api.services import PokemonAPIService
   service = PokemonAPIService()
   pokemon, success, error = service.fetch_pokemon("pikachu")
   
   # API endpoints:
   GET /pokemon/api/pokemon/pikachu/  # JSON API
   GET /pokemon/                     # Web interface
   GET /pokemon/search/              # Search form

3. Features:
   - Web interface for browsing Pokemon
   - Search and fetch new Pokemon from API
   - Download JSON data files
   - Admin interface for management
   - API endpoints for programmatic access
   - Comprehensive error logging
   - Database storage with caching
   - Management commands for bulk operations

4. File Structure:
   pokemon_api/
   â”œâ”€â”€ __init__.py
   â”œâ”€â”€ apps.py
   â”œâ”€â”€ admin.py
   â”œâ”€â”€ models.py
   â”œâ”€â”€ services.py
   â”œâ”€â”€ views.py
   â”œâ”€â”€ urls.py
   â”œâ”€â”€ tests.py
   â”œâ”€â”€ management/
   â”‚   â”œâ”€â”€ __init__.py
   â”‚   â””â”€â”€ commands/
   â”‚       â”œâ”€â”€ __init__.py
   â”‚       â””â”€â”€ fetch_pokemon.py
   â””â”€â”€ migrations/
       â”œâ”€â”€ __init__.py
       â””â”€â”€ 0001_initial.py

   templates/pokemon_api/
   â”œâ”€â”€ base.html
   â”œâ”€â”€ pokemon_list.html
   â”œâ”€â”€ pokemon_detail.html
   â””â”€â”€ pokemon_search.html

5. Admin Features:
   - View all Pokemon and API requests
   - Search and filter functionality
   - Bulk operations
   - JSON data inspection

6. API Response Format:
   {
     "success": true,
     "data": {
       "id": 25,
       "name": "pikachu",
       "height": 4,
       "weight": 60,
       "height_meters": 0.4,
       "weight_kg": 6.0,
       "base_experience": 112,
       "types": ["electric"],
       "abilities": ["static"],
       "hidden_abilities": ["lightning-rod"],
       "base_stats": {"hp": 35, "attack": 55, ...}
     }
   }
"""
